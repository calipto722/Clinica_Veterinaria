/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas;

import Acceso_Base_de_Datos.Conexion;
import Acceso_Base_de_Datos.MascotaData;
import Acceso_Base_de_Datos.VisitaData;
import Entidades.Mascota;
import Entidades.Visita;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author noelia
 */
public class Mascota_HistorialClinico extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel();
    private Connection con = null;
    private Mascota masp;

    public Mascota_HistorialClinico() {
        initComponents();
        cargarbox();
        armarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jbExportar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        PesoPromedio = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtTratamiento = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("HISTORIAL CLINICO");

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox1KeyReleased(evt);
            }
        });

        jbExportar.setText("Exportar");
        jbExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportarActionPerformed(evt);
            }
        });

        jLabel2.setText("PESO PROMEDIO:");

        PesoPromedio.setText("--------");

        jLabel3.setText("Filtrar Tratamiento:");

        jtTratamiento.setText("Todos");
        jtTratamiento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtTratamientoKeyReleased(evt);
            }
        });

        jLabel4.setText("Mascota:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, 262, Short.MAX_VALUE)
                            .addComponent(jtTratamiento))
                        .addGap(0, 230, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(PesoPromedio, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbExportar)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtTratamiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbExportar)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(294, 294, 294)
                        .addComponent(PesoPromedio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportarActionPerformed
        con = Conexion.getConexion();
        if (jComboBox1.getSelectedIndex() == -1 || jComboBox1.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Seleccionar una Mascota");
        } else {
            masp = (Mascota) jComboBox1.getSelectedItem();
        }
        try {
            JasperReport report = null;
            String dir = "src\\RECURSOS\\Historial_Clinico.jasper";
            report = (JasperReport) JRLoader.loadObjectFromFile(dir);
            Map parametro = new HashMap();
            parametro.put("Mascota", masp.getNombreAlias());
            JasperPrint jprint = JasperFillManager.fillReport(report, parametro, con);
            JasperViewer view = new JasperViewer(jprint, false);
            view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            view.setVisible(true);
        } catch (JRException ex) {
            Logger.getLogger(Mascota_HistorialClinico.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NullPointerException np) {
            JOptionPane.showMessageDialog(this, "Error al exportar Historial");
        }
    }//GEN-LAST:event_jbExportarActionPerformed

    private void jComboBox1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyReleased

// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1KeyReleased

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
        VisitaData visitaData = new VisitaData();
        MascotaData mascotaData = new MascotaData();
        if ( jComboBox1.getSelectedIndex()== 0) {
              PesoPromedio.setText("-----");
           
            }else{
              masp = (Mascota) jComboBox1.getSelectedItem();
              borrarFilas();
            List<Visita> visitas = visitaData.listarVisitasPorMascota(masp);

            int contador = 0;

            for (Visita visita : visitas) {

                modelo.addRow(new Object[]{
                    visita.getFechaVisita(),
                    visita.getTratamiento().getTipoTratamiento(),
                    visita.getPesoActual()
                });

                contador++;
                if (contador >= 10) {
                    break;
                }

            }
          try {
                String pesopro = pesopromed(jTable1);
                PesoPromedio.setText(pesopro);

                if (masp != null) {
                    // Manejo de la excepción al convertir a double
                    try {
                        masp.setPesoprod(Double.valueOf(pesopro));
                        mascotaData.ModificarPesoMascota(masp);
                    } catch (NumberFormatException e) {
                        // Manejo de la excepción de conversión a double
                        // Puedes imprimir un mensaje de error o realizar otras acciones
                        System.out.println("Error al convertir a double: " + e.getMessage());
                    }
                }
            } catch (Exception ex) {
                // Manejo de excepciones generales
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jtTratamientoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtTratamientoKeyReleased
        MascotaData mascotaData = new MascotaData(); 
        borrarFilas();
        VisitaData visitData = new VisitaData();

      try {
        List<Visita> visitas = visitData.listarVisitasPorMascota(masp);
        for (Visita visit : visitas) {
            if (visit.getTratamiento().getTipoTratamiento().toLowerCase().startsWith(jtTratamiento.getText().toLowerCase())) {
                modelo.addRow(new Object[]{
                    visit.getFechaVisita(),
                    visit.getTratamiento().getTipoTratamiento(),
                    visit.getPesoActual()
                });
            }
        }

        try {
            String pesopro = pesopromed(jTable1);
            PesoPromedio.setText(pesopro);
            
            if (masp != null) {
                try {
                    masp.setPesoprod(Double.valueOf(pesopro));
                    mascotaData.ModificarPesoMascota(masp);
                } catch (NumberFormatException e) {
                    // Manejo de excepción de conversión a double
                    System.err.println("Error al convertir a double: " + e.getMessage());
                }
            }
        } catch (Exception ex) {
            // Manejo de excepción general para pesopromed
            System.err.println("Error en pesopromed: " + ex.getMessage());
        }
    } catch (Exception ex) {
        // Manejo de excepción general para listarVisitasPorMascota
        System.err.println("Error en listarVisitasPorMascota: " + ex.getMessage());
    }
    }//GEN-LAST:event_jtTratamientoKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PesoPromedio;
    private javax.swing.JComboBox<Object> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbExportar;
    private javax.swing.JTextField jtTratamiento;
    // End of variables declaration//GEN-END:variables
     private void cargarbox() {

        MascotaData mascotaD = new MascotaData();
        List<Mascota> mascotas = mascotaD.ListarMascota();
        jComboBox1.removeAllItems();
        jComboBox1.addItem("Seleccionar Mascota");
        for (int i = 0; i < mascotas.size(); i++) {
            jComboBox1.addItem(mascotas.get(i));

        }

    }

    private void armarTabla() {
        modelo.addColumn("Fecha visita");
        modelo.addColumn("Tratamiento");
        modelo.addColumn("Peso");

        jTable1.setModel(modelo);

    }

    private void borrarFilas() {
        int f = jTable1.getRowCount() - 1;

        for (int i = f; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private String pesopromed(JTable jTable) {

        double pesosuma = 0;
        double pesoprod = 0;
        for (int i = 0; i < jTable.getRowCount(); i++) {

            pesosuma = (double) (pesosuma + Double.parseDouble(jTable1.getValueAt(i, 2).toString()));
            pesoprod = pesosuma / jTable.getRowCount();
         
        }
      
        return pesoprod + "";
     
    }

}
